name: Deploy and Convert

on:
  push:
    branches:
      - main
  workflow_dispatch: {}

jobs:
  deploy-lambda:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout source code
        uses: actions/checkout@v3

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: 🐳 Login to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-2 | \
          docker login --username AWS --password-stdin 703671891952.dkr.ecr.us-east-2.amazonaws.com/projectplace-lambda

      - name: 🛠 Build and push Docker image to ECR
        run: |
          docker build -t projectplace-lambda .
          docker tag projectplace-lambda:latest 703671891952.dkr.ecr.us-east-2.amazonaws.com/projectplace-lambda:latest
          docker push 703671891952.dkr.ecr.us-east-2.amazonaws.com/projectplace-lambda:latest

      - name: 🚀 Update Lambda function code with retry-safe loop
        run: |
          for i in {1..5}; do
            echo "⏳ Attempt $i: Updating Lambda code..."
            aws lambda update-function-code \
              --function-name ProjectPlaceDataExtractor \
              --image-uri 703671891952.dkr.ecr.us-east-2.amazonaws.com/projectplace-lambda:latest \
              --region us-east-2 && break

            echo "⚠️ Lambda still locked (ResourceConflict). Retrying in $((10 * i))s..."
            sleep $((10 * i))

            if [ "$i" -eq 5 ]; then
              echo "❌ Maximum retries reached. Lambda is still locked."
              exit 1
            fi
          done

      - name: ⏳ Wait for Lambda code update to finish
        run: |
          aws lambda wait function-updated \
            --function-name ProjectPlaceDataExtractor \
            --region us-east-2

      - name: 🧬 Merge and apply environment variables
        run: |
          OLD_ENV_JSON=$(aws lambda get-function-configuration \
            --function-name ProjectPlaceDataExtractor \
            --region us-east-2 \
            --query 'Environment.Variables' \
            --output json)

          NEW_ENV_JSON=$(echo "$OLD_ENV_JSON" | jq \
            --arg secret "ProjectPlaceAPICredentials" \
            --arg ddb "ProjectPlace_DataExtrator_landing_table_v3" \
            --arg s3 "projectplace-dv-2025-x9a7b" \
            '. + {
              "SECRET_NAME": $secret,
              "DYNAMODB_TABLE_NAME": $ddb,
              "S3_BUCKET_NAME": $s3
            }')

          FINAL_ENV=$(jq -n --argjson vars "$NEW_ENV_JSON" '{Variables: $vars}')
          echo "$FINAL_ENV" > tmp_env.json

          aws lambda update-function-configuration \
            --function-name ProjectPlaceDataExtractor \
            --region us-east-2 \
            --environment file://tmp_env.json

      - name: ⏳ Wait for environment update to finish
        run: |
          aws lambda wait function-updated \
            --function-name ProjectPlaceDataExtractor \
            --region us-east-2

      - name: 🏁 Invoke Lambda and wait for completion
        run: |
          aws lambda invoke \
            --function-name ProjectPlaceDataExtractor \
            --region us-east-2 \
            --payload '{}' \
            --cli-binary-format raw-in-base64-out \
            out.json
          echo "✅ Lambda complete. Output:"
          cat out.json

  convert-docx:
    runs-on: ubuntu-latest
    needs: [deploy-lambda]

    steps:
      - name: 📥 Checkout Source
        uses: actions/checkout@v3

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: 🏗 Install LibreOffice
        run: |
          sudo apt-get update
          sudo apt-get install -y libreoffice

      - name: 📥 Download all .docx from S3 and confirm freshness
        run: |
          mkdir -p actas
          echo "📥 Syncing .docx files from S3..."
          aws s3 sync s3://projectplace-dv-2025-x9a7b/actas actas --exclude "*" --include "*.docx"
          echo "📂 File timestamps:"
          find actas -type f -name "*.docx" -exec stat -c "%y %n" {} \; | sort -r | head -n 5

          COUNT_DOCX=$(ls -1 actas/*.docx 2>/dev/null | wc -l)
          if [ "$COUNT_DOCX" -eq 0 ]; then
            echo "❌ No .docx files found!"
            exit 1
          fi

      - name: 🖨 Convert each .docx => .pdf
        run: |
          cd actas
          for f in *.docx; do
            echo "🖨 Converting $f..."
            libreoffice --headless --convert-to pdf "$f"
          done

      - name: 🚀 Upload PDFs to S3
        run: |
          echo "🚀 Uploading PDFs to S3..."
          aws s3 sync actas s3://projectplace-dv-2025-x9a7b/actas \
            --exclude "*" \
            --include "*.pdf" \
            --content-type "application/pdf" \
            --content-disposition "attachment"
