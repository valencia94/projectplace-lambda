# .github/workflows/adhoc_send_approval_email.yml
name: Ad-hoc Acta Approval Email

on:
  workflow_dispatch:
    inputs:
      project_id:
        description: 'Project / Acta ID'
        required: true
      recipient:
        description: 'Override recipient e-mail'
        required: true

jobs:
  send-approval:
    runs-on: ubuntu-latest

    steps:
      # ── Step 1: look up the row that has the PDF ─────────────────
      - name: 🔎 Compose Lambda payload
        id: prepare
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          TABLE_NAME: ${{ secrets.DYNAMODB_ENRICHMENT_TABLE }}
          PID:        ${{ github.event.inputs.project_id }}
          EMAIL:      ${{ github.event.inputs.recipient }}
        shell: python
        run: |
          import boto3, os, json, sys, time
          from boto3.dynamodb.conditions import Key

          region     = os.environ['AWS_REGION']
          table_name = os.environ['TABLE_NAME']
          pid        = os.environ['PID']
          email      = os.environ['EMAIL']

          ddb  = boto3.resource('dynamodb', region_name=region).Table(table_name)
          rows = ddb.query(KeyConditionExpression=Key('project_id').eq(pid)).get('Items', [])

          # pick the newest row that already has a PDF
          rows = [r for r in rows if r.get('s3_pdf_path')]
          if not rows:
              print('::error::No PDF found for this project – generate Acta first.')
              sys.exit(1)

          rows.sort(key=lambda r: r.get('timestamp', 0), reverse=True)
          row = rows[0]

          payload = {
              "project_id": pid,
              "card_id":   row['card_id'],
              "pdf_key":   row['s3_pdf_path'],
              "recipient": email
          }

          # expose for the next step
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              fh.write(f"payload={json.dumps(payload)}\n")

      # ── Step 2: invoke sendApprovalEmail Lambda ──────────────────
      - name: ✉️  Invoke sendApprovalEmail Lambda
        uses: aws-actions/aws-cli-action@v1
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}
          inline: |
            aws lambda invoke \
              --function-name sendApprovalEmail \
              --payload '${{ steps.prepare.outputs.payload }}' \
              --cli-binary-format raw-in-base64-out \
              /tmp/out.json
            cat /tmp/out.json
