# .github/workflows/deploy_and_convert.yml
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
name: Build & Deploy ‚Üí Smoke-test  ProjectPlace Lambda

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ global constants ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
env:
  AWS_REGION:      us-east-2
  IMAGE_REPO:      projectplace-lambda         # ‚Üê your ECR repo name
  IMAGE_TAG:       latest
  FUNCTION_NAME:   ProjectPlaceDataExtractor   # ‚Üê Lambda function to update

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ JOB 1: build container & deploy it to Lambda ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
jobs:
  deploy:
    name: Build Docker ‚Üí push to ECR ‚Üí update Lambda
    runs-on: ubuntu-latest

    steps:
    # 1Ô∏è‚É£  Pull down the code we just pushed
    - name: Checkout source
      uses: actions/checkout@v4

    # 2Ô∏è‚É£  Load AWS credentials (static keys you already have in repo secrets)
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ env.AWS_REGION }}

    # 3Ô∏è‚É£  Discover our AWS Account-ID once and reuse everywhere
    - name: Export AWS Account ID
      id: vars
      run: |
        echo "account_id=$(aws sts get-caller-identity --query Account --output text)" >> "$GITHUB_OUTPUT"

    # 4Ô∏è‚É£  Log in to Amazon ECR
    - name: Login to ECR
      uses: aws-actions/amazon-ecr-login@v2

    # 5Ô∏è‚É£  Build the image (multi-stage, no cache) & push it
    - name: Build & Push Docker image
      env:
        ACCOUNT_ID: ${{ steps.vars.outputs.account_id }}
      run: |
        IMAGE_URI="$ACCOUNT_ID.dkr.ecr.${AWS_REGION}.amazonaws.com/${IMAGE_REPO}:${IMAGE_TAG}"
        echo "üõ†Ô∏è  Building  $IMAGE_URI"
        docker build --pull --no-cache -t "$IMAGE_URI" .
        docker push "$IMAGE_URI"

    # 6Ô∏è‚É£  Point the Lambda function at the new image
    - name: Update Lambda code to new image
      env:
        ACCOUNT_ID: ${{ steps.vars.outputs.account_id }}
      run: |
        IMAGE_URI="$ACCOUNT_ID.dkr.ecr.${AWS_REGION}.amazonaws.com/${IMAGE_REPO}:${IMAGE_TAG}"
        echo "üöÄ Updating Lambda ${FUNCTION_NAME} ‚Üí $IMAGE_URI"
        aws lambda update-function-code \
          --function-name "${FUNCTION_NAME}" \
          --image-uri "$IMAGE_URI" \
          --region "${AWS_REGION}"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ JOB 2: quick smoke-test to be sure the container runs ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  smoke-test:
    name: One-shot Lambda invocation (Smoke test)
    needs: deploy                  # ‚Üê waits for the build/deploy job above
    runs-on: ubuntu-latest

    steps:
    # 1Ô∏è‚É£  Same static keys ‚Äì we only need the CLI here
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ env.AWS_REGION }}

    # 2Ô∏è‚É£  Invoke the Lambda and show its JSON response right in the log
    - name: Invoke Lambda for smoke test
      run: |
        echo "‚è±Ô∏è  Invoking ${FUNCTION_NAME} with empty payload‚Ä¶"
        aws lambda invoke \
          --function-name "${FUNCTION_NAME}" \
          --payload '{}' \
          --region "${AWS_REGION}" \
          /tmp/response.json
        echo "‚úÖ Lambda responded with:"
        cat /tmp/response.json | jq .
