name: Deploy and Convert               # shows in the Actions tab
on:
  push:               {branches: [main]}
  workflow_dispatch:  {}

################################################################################
# GLOBAL CONSTANTS (plain strings, no ${{ ‚Ä¶ }})
################################################################################
env:
  AWS_REGION:   us-east-2
  ACCOUNT_ID:   703671891952
  REPO_NAME:    projectplace-lambda
  STAGE_TAG:    latest                # change if you want staging images
  BUCKET:       projectplace-dv-2025-x9a7b
  DOC_PREFIX:   actas/                # where Lambda writes the Acta_*.docx

################################################################################
# 1Ô∏è‚É£  BUILD  ‚Üí  PUSH  ‚Üí  UPDATE  LAMBDA
################################################################################
jobs:

  deploy-lambda:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - id: vars                       # derive once, reuse everywhere
      run: |
        echo "ECR_REGISTRY=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"           >> "$GITHUB_OUTPUT"
        echo "IMAGE_TAG=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${REPO_NAME}:${STAGE_TAG}" >> "$GITHUB_OUTPUT"

    - uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ env.AWS_REGION }}

    - name: üîê Login to ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION \
        | docker login --username AWS --password-stdin ${{ steps.vars.outputs.ECR_REGISTRY }}

    - name: üê≥ Build + push image
      run: |
        docker build --pull --no-cache -t "${{ steps.vars.outputs.IMAGE_TAG }}" .
        docker push "${{ steps.vars.outputs.IMAGE_TAG }}"

    - name: üöÄ Update Lambda code
      run: |
        aws lambda update-function-code \
          --function-name ProjectPlaceDataExtractor \
          --image-uri     "${{ steps.vars.outputs.IMAGE_TAG }}" \
          --region        $AWS_REGION

    - name: ‚è≥ Wait for Lambda code ready
      run: |
        aws lambda wait function-updated \
          --function-name ProjectPlaceDataExtractor \
          --region $AWS_REGION

    # (re-apply env-vars if you occasionally change them)
    - name: üß¨ Ensure Lambda env vars
      run: |
        aws lambda update-function-configuration \
          --function-name ProjectPlaceDataExtractor \
          --environment "Variables={
              SECRET_NAME=ProjectPlaceAPICredentials,
              DYNAMODB_TABLE_NAME=ProjectPlace_DataExtrator_landing_table_v3,
              S3_BUCKET_NAME=${BUCKET}
          }" \
          --region $AWS_REGION
        aws lambda wait function-updated \
          --function-name ProjectPlaceDataExtractor \
          --region $AWS_REGION

    # ------------------------------------------
    # Trigger the Lambda *asynchronously* so it
    # can start generating the DOCX in S3.
    # ------------------------------------------
    - name: üîî Kick off DOCX generation
      run: |
        aws lambda invoke \
          --function-name ProjectPlaceDataExtractor \
          --invocation-type Event \
          --payload '{}' \
          /tmp/resp.json
        echo "Lambda invoked: $(cat /tmp/resp.json)"

################################################################################
# 2Ô∏è‚É£  SYNC FRESH DOCX FROM S3
################################################################################
  sync-docx:
    needs: deploy-lambda
    runs-on: ubuntu-latest

    steps:
    - uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ env.AWS_REGION }}

    - name: ‚è≥ Wait for new Acta_*.docx (max 5 min)
      run: |
        mkdir -p actas
        for i in {1..15}; do
          echo "Poll $i/15 ‚Ä¶"
          aws s3 sync "s3://$BUCKET/$DOC_PREFIX" actas \
            --exclude '*' --include 'Acta_*.docx' --delete
          n=$(ls actas/*.docx 2>/dev/null | wc -l || true)
          if [ "$n" -gt 0 ]; then echo "Found $n DOCX"; exit 0; fi
          sleep 20
        done
        echo "‚ùå Timed out waiting for DOCX"; exit 1

    - name: üì¶ Upload artifacts (optional)
      uses: actions/upload-artifact@v4
      with:
        name: actas-docx
        path: actas/*.docx

################################################################################
# 3Ô∏è‚É£  CONVERT DOCX ‚ûú PDF  (needs fresh files)
################################################################################
  convert-docx:
    needs: sync-docx
    runs-on: ubuntu-latest

    steps:
    - uses: actions/download-artifact@v4      # pulls in the DOCX from previous job
      with: {name: actas-docx}

    - uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ env.AWS_REGION }}

    - name: üèó Install LibreOffice
      run: |
        sudo apt-get update
        sudo apt-get install -y libreoffice

    - name: üñ® Convert DOCX ‚Üí PDF
      run: |
        cd actas-docx
        for f in Acta_*.docx; do
          echo "Converting $f"
          libreoffice --headless --convert-to pdf "$f"
        done

    - name: üì§ Upload PDFs to S3
      run: |
        aws s3 sync . "s3://$BUCKET/$DOC_PREFIX" \
          --exclude '*' --include 'Acta_*.pdf' \
          --content-type application/pdf \
          --content-disposition attachment
