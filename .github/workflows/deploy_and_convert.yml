name: Deploy and Convert

on:
  push:
    branches:
      - main
  workflow_dispatch: {}

jobs:
  deploy-lambda:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout source code
        uses: actions/checkout@v3

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: 🐳 Login to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-2 | \
          docker login --username AWS --password-stdin \
            703671891952.dkr.ecr.us-east-2.amazonaws.com/projectplace-lambda

      - name: 🛠 Build and push Docker image to ECR
        env:
          IMAGE_TAG: 703671891952.dkr.ecr.us-east-2.amazonaws.com/projectplace-lambda:latest
        run: |
          # Force a clean rebuild (ignore all cached layers)
          docker build --no-cache --pull -t projectplace-lambda .
          # Tag & push
          docker tag projectplace-lambda:latest $IMAGE_TAG
          docker push $IMAGE_TAG
          
      - name: 🚀 Update Lambda function code
        run: |
          aws lambda update-function-code \
            --function-name ProjectPlaceDataExtractor \
            --image-uri 703671891952.dkr.ecr.us-east-2.amazonaws.com/projectplace-lambda:latest \
            --region us-east-2

      - name: ⏳ Wait for Lambda code update to finish
        run: |
          aws lambda wait function-updated \
            --function-name ProjectPlaceDataExtractor \
            --region us-east-2

      - name: 🧬 Merge and apply environment variables
        run: |
          OLD_ENV_JSON=$(aws lambda get-function-configuration \
            --function-name ProjectPlaceDataExtractor \
            --region us-east-2 \
            --query 'Environment.Variables' --output json)

          NEW_ENV_JSON=$(echo "$OLD_ENV_JSON" | jq \
            --arg secret "ProjectPlaceAPICredentials" \
            --arg ddb "ProjectPlace_DataExtrator_landing_table_v3" \
            --arg s3 "projectplace-dv-2025-x9a7b" \
            '. + {
              "SECRET_NAME": $secret,
              "DYNAMODB_TABLE_NAME": $ddb,
              "S3_BUCKET_NAME": $s3
            }'
          )

          echo '{"Variables":'"$NEW_ENV_JSON"'}' > tmp_env.json

          aws lambda update-function-configuration \
            --function-name ProjectPlaceDataExtractor \
            --region us-east-2 \
            --environment file://tmp_env.json

      - name: ⏳ Wait for environment update to finish
        run: |
          aws lambda wait function-updated \
            --function-name ProjectPlaceDataExtractor \
            --region us-east-2

      - name: 🏁 Invoke Lambda Asynchronously
        run: |
          aws lambda invoke \
            --function-name ProjectPlaceDataExtractor \
            --region us-east-2 \
            --payload '{}' \
            --invocation-type Event \
            out.json \
            --cli-binary-format raw-in-base64-out
          echo "✅ Lambda invoked. Now waiting for Actas to finish generating..."

  convert-docx:
    runs-on: ubuntu-latest
    needs: [deploy-lambda]

    steps:
      - name: 📥 Checkout source
        uses: actions/checkout@v3

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: 🏗 Install LibreOffice
        run: |
          sudo apt-get update
          sudo apt-get install -y libreoffice

      - name: 📥 Wait and download Acta_*.docx from S3
        run: |
          mkdir -p actas

          for i in {1..15}; do
            echo "⏳ Attempt $i: checking for 'Acta_*.docx' in S3..."
            aws s3 sync \
              s3://projectplace-dv-2025-x9a7b/actas actas \
              --exclude "*" --include "Acta_*.docx" \
              --delete

            COUNT=$(ls -1 actas/Acta_*.docx 2>/dev/null | wc -l)
            if [ "$COUNT" -gt 0 ]; then
              echo "✅ Found $COUNT .docx file(s). Proceeding to conversion."
              break
            fi

            echo "🔄 No Acta_*.docx found yet. Retrying in 20 seconds..."
            sleep 20

            if [ "$i" -eq 15 ]; then
              echo "❌ Timeout after 5 minutes. No .docx files found."
              exit 1
            fi
          done

      - name: 🖨 Convert each .docx => .pdf
        run: |
          cd actas
          echo "Converting .docx to .pdf..."
          for f in Acta_*.docx; do
            libreoffice --headless --convert-to pdf "$f"
          done
          echo "✅ Conversion done."

      - name: 🚀 Upload .pdf files back to S3
        run: |
          aws s3 sync actas s3://projectplace-dv-2025-x9a7b/actas \
            --exclude "*" --include "Acta_*.pdf" \
            --content-type "application/pdf" \
            --content-disposition "attachment"
          echo "✅ PDF upload complete."
