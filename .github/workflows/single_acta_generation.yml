name: Single Acta Creation and Conversion

on:
  workflow_dispatch:
    inputs:
      project_id:
        description: "ProjectPlace project ID for Acta generation"
        required: true
        type: string

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: projectplace-lambda
  LAMBDA_FUNCTION_NAME: ProjectPlaceDataExtractor
  S3_BUCKET: projectplace-dv-2025-x9a7b

jobs:
  build_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build & push container image
        env:
          REGISTRY:   ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY }}
          TAG:        ${{ github.sha }}
        run: |
          echo "::group::Docker build"
          docker build -t $REGISTRY/$REPOSITORY:$TAG .
          echo "::endgroup::"
          docker push $REGISTRY/$REPOSITORY:$TAG

      - name: Update Lambda function code
        env:
          REGISTRY:   ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY }}
          TAG:        ${{ github.sha }}
        run: |
          aws lambda update-function-code \
            --function-name "${{ env.LAMBDA_FUNCTION_NAME }}" \
            --image-uri "$REGISTRY/$REPOSITORY:$TAG"

      # ---- Invoke Lambda for this project_id (async) ----
      - name: Invoke Lambda for Single Acta (async)
        env:
          PROJECT_ID: ${{ github.event.inputs.project_id }}
        run: |
            PAYLOAD="{\"project_id\": \"${PROJECT_ID}\"}"
            echo "Invoking Lambda for project_id=$PROJECT_ID"
            aws lambda invoke \
              --function-name "ProjectPlaceDataExtractor" \
              --invocation-type Event \
              --payload "$PAYLOAD" \
              output.json \
              --region "${AWS_REGION}"
            echo "Lambda triggered (async) for project $PROJECT_ID"

  poll_and_convert:
    runs-on: ubuntu-latest
    needs: build_deploy

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Install LibreOffice
        run: |
          sudo apt-get update
          sudo apt-get install -y libreoffice

      # ---- Poll S3 for DOCX ----
      - name: Poll S3 for Acta DOCX (max 5 min)
        env:
          PROJECT_ID: ${{ github.event.inputs.project_id }}
          S3_BUCKET: ${{ env.S3_BUCKET }}
        run: |
          mkdir -p acta
          SAFE_ID="${PROJECT_ID//\//_}"
          for i in {1..15}; do
            aws s3 sync s3://${S3_BUCKET}/actas acta --exclude "*" --include "Acta_*_${SAFE_ID}.docx"
            FILE=$(ls -1 acta/Acta_*_${SAFE_ID}.docx 2>/dev/null | head -n 1 || true)
            if [ -n "$FILE" ]; then
              echo "✅ Found DOCX: $FILE"
              echo "ACTA_DOCX=$FILE" >> $GITHUB_ENV
              break
            fi
            echo "⏳ Not found yet. Waiting 20s..."
            sleep 20
            [ "$i" -eq 15 ] && { echo "❌ Timeout waiting for Acta DOCX for project $PROJECT_ID"; exit 1; }
          done

      # ---- Convert DOCX to PDF ----
      - name: Convert DOCX to PDF
        run: |
          cd acta
          libreoffice --headless --convert-to pdf "$(basename "$ACTA_DOCX")"
          echo "✅ PDF generated."

      # ---- Upload PDF to S3 ----
      - name: Upload PDF to S3
        env:
          S3_BUCKET: ${{ env.S3_BUCKET }}
        run: |
          cd acta
          PDF_FILE=$(ls -1 Acta_*.pdf | head -n 1)
          aws s3 cp "$PDF_FILE" "s3://${S3_BUCKET}/actas/$PDF_FILE" \
            --content-type "application/pdf" \
            --content-disposition "attachment"
          echo "✅ Uploaded $PDF_FILE to s3://${S3_BUCKET}/actas/$PDF_FILE"
