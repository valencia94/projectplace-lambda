name: Build, Deploy & Convert ‚Äì ProjectPlaceDataExtractor

on:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'requirements.txt'
      - 'lambda_handler.py'
      - '.github/workflows/deploy-projectplace-lambda.yml'
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: projectplace-lambda
  LAMBDA_FUNCTION_NAME: ProjectPlaceDataExtractor

jobs:
  build_deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build & push container image
      env:
        REGISTRY:   ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ env.ECR_REPOSITORY }}
        TAG:        ${{ github.sha }}
      run: |
        echo "::group::Docker build"
        docker build -t $REGISTRY/$REPOSITORY:$TAG .
        echo "::endgroup::"
        docker push $REGISTRY/$REPOSITORY:$TAG

    - name: Update Lambda function code
      env:
        REGISTRY:   ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ env.ECR_REPOSITORY }}
        TAG:        ${{ github.sha }}
      run: |
        aws lambda update-function-code \
          --function-name "${{ env.LAMBDA_FUNCTION_NAME }}" \
          --image-uri "$REGISTRY/$REPOSITORY:$TAG"

    # ---- Fire Lambda Async (so S3 job can start polling) ----
    - name: Invoke Lambda (async, fire-and-forget)
      run: |
        aws lambda invoke \
          --function-name "${{ env.LAMBDA_FUNCTION_NAME }}" \
          --invocation-type Event \
          --payload '{}' \
          --region "${{ env.AWS_REGION }}" \
          /tmp/resp.json
        echo "Triggered ‚Üí $(cat /tmp/resp.json)"

  convert_docx:
    runs-on: ubuntu-latest
    needs: build_deploy

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ env.AWS_REGION }}

    - name: Install LibreOffice
      run: |
        sudo apt-get update
        sudo apt-get install -y libreoffice

    - name: Poll S3 until Acta_*.docx appear (max 5 min)
      run: |
        mkdir -p actas
        for i in {1..15}; do
          echo "‚è≥ Attempt $i ‚Äì syncing Acta_*.docx ‚Ä¶"
          aws s3 sync s3://projectplace-dv-2025-x9a7b/actas actas \
            --exclude "*" --include "Acta_*.docx" --delete
          COUNT=$(ls -1 actas/Acta_*.docx 2>/dev/null | wc -l || true)
          if [ "$COUNT" -gt 0 ]; then
            echo "‚úÖ $COUNT DOCX file(s) found."
            break
          fi
          echo "üîÑ Not yet. Sleeping 20 s ‚Ä¶"
          sleep 20
          [ "$i" -eq 15 ] && { echo "‚ùå Timeout (5 min)"; exit 1; }
        done

    - name: Convert each DOCX ‚áí PDF
      run: |
        cd actas
        for f in Acta_*.docx; do
          libreoffice --headless --convert-to pdf "$f"
        done
        echo "‚úÖ Conversion finished."

    - name: Upload PDFs back to S3
      run: |
        aws s3 sync actas s3://projectplace-dv-2025-x9a7b/actas \
          --exclude "*" --include "Acta_*.pdf" \
          --content-type "application/pdf" \
          --content-disposition "attachment"
        echo "‚úÖ PDF upload complete."
