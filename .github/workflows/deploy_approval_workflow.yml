name: Deploy Acta Approval Lambdas   # clearer title

on:
  workflow_dispatch:        # manual trigger button
  push:
    branches: [ main ]
    paths:
      - approval/send_approval_email.py
      - approval/handle_approval_callback.py
      - approval/email_utils.py
      - config/email_map.json
      - .github/workflows/deploy_approval.yml

concurrency:
  group: deploy-acta
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      TABLE_NAME: ${{ secrets.DYNAMODB_ENRICHMENT_TABLE }}
      FUNC_EMAIL: sendApprovalEmail
      FUNC_CB:    handleApprovalCallback

    steps:
    - name: 📥  Checkout repo
      uses: actions/checkout@v4

    - name: 🔑  Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ env.AWS_REGION }}

    # ─────────────── EMAIL LAMBDA ───────────────
    - name: 📦  Zip sendApprovalEmail
      run: |
        set -e
        zip -j send_approval_email.zip \
          approval/send_approval_email.py \
          approval/email_utils.py \
          config/email_map.json

    - name: 🚀  Deploy sendApprovalEmail
      run: |
        set -e
        aws lambda update-function-code \
          --function-name "$FUNC_EMAIL" \
          --zip-file fileb://send_approval_email.zip
        while true; do
          STATUS=$(aws lambda get-function --function-name "$FUNC_EMAIL" \
                     --query 'Configuration.LastUpdateStatus' --output text)
          [ "$STATUS" = "Successful" ] && break
          echo "🕒 waiting on $FUNC_EMAIL → $STATUS"; sleep 4
        done

    # ───────────── CALLBACK LAMBDA ──────────────
    - name: 📦  Zip handleApprovalCallback
      run: |
        set -e
        zip -j handle_approval_callback.zip \
          approval/handle_approval_callback.py \
          approval/email_utils.py

    - name: 🚀  Deploy handleApprovalCallback
      run: |
        set -e
        aws lambda update-function-code \
          --function-name "$FUNC_CB" \
          --zip-file fileb://handle_approval_callback.zip
        while true; do
          STATUS=$(aws lambda get-function --function-name "$FUNC_CB" \
                     --query 'Configuration.LastUpdateStatus' --output text)
          [ "$STATUS" = "Successful" ] && break
          echo "🕒 waiting on $FUNC_CB → $STATUS"; sleep 4
        done

    # ─────────── GSI (idempotent) ───────────────
    - name: 🛡️  Ensure approval_token-index GSI
      run: |
        set -e
        TABLE="${TABLE_NAME}"
        GSI="approval_token-index"

        if aws dynamodb describe-table --table-name "$TABLE" \
             --query "Table.GlobalSecondaryIndexes[?IndexName=='$GSI']" \
             --output text | grep -q "$GSI"; then
          echo "✅ GSI already present"; exit 0
        fi

        BILLING=$(aws dynamodb describe-table --table-name "$TABLE" \
                   --query 'BillingModeSummary.BillingMode' --output text \
                   || echo "PROVISIONED")

        echo "⚙️  Creating GSI $GSI on $TABLE (billing=$BILLING)…"

        if [ "$BILLING" = "PAY_PER_REQUEST" ]; then
          UPDATE='[{"Create":{
            "IndexName":"'"$GSI"'",
            "KeySchema":[
              {"AttributeName":"approval_token","KeyType":"HASH"},
              {"AttributeName":"project_id","KeyType":"RANGE"}],
            "Projection":{"ProjectionType":"ALL"}}}]'
        else
          UPDATE='[{"Create":{
            "IndexName":"'"$GSI"'",
            "KeySchema":[
              {"AttributeName":"approval_token","KeyType":"HASH"},
              {"AttributeName":"project_id","KeyType":"RANGE"}],
            "Projection":{"ProjectionType":"ALL"},
            "ProvisionedThroughput":{"ReadCapacityUnits":1,"WriteCapacityUnits":1}}}]'
        fi

        aws dynamodb update-table --table-name "$TABLE" \
          --attribute-definitions \
            AttributeName=approval_token,AttributeType=S \
            AttributeName=project_id,AttributeType=S \
          --global-secondary-index-updates "$UPDATE"
