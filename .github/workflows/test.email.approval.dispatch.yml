name: Ad-hoc Acta Approval Email

on:
  workflow_dispatch:
    inputs:
      project_id:
        description: "ProjectPlace project_id to process"
        required: true
      override_email:
        description: "Recipient e-mail address"
        required: true

jobs:
  send-approval:
    runs-on: ubuntu-latest

    steps:
      - name: üêç Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: üì¶ Install boto3
        run: pip install boto3

      - name: üöÄ Lookup project + invoke Lambda
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TABLE_NAME: ${{ secrets.DYNAMODB_ENRICHMENT_TABLE }}
          PID:  ${{ github.event.inputs.project_id }}
          EMAIL:${{ github.event.inputs.override_email }}
        run: |
          python3 - <<'PY'
          import os, json, boto3
          from boto3.dynamodb.conditions import Key

          region     = os.environ['AWS_REGION']
          table_name = os.environ['TABLE_NAME']
          pid        = os.environ['PID']
          email      = os.environ['EMAIL']

          ddb   = boto3.resource('dynamodb', region_name=region)
          table = ddb.Table(table_name)

          print(f"üîé Querying DynamoDB for project {pid} ‚Ä¶")
          resp  = table.query(KeyConditionExpression=Key('project_id').eq(pid))
          items = resp.get('Items', [])
          if not items:
              raise SystemExit("‚ùå project_id not found in DynamoDB")

          # --- pick a card_id ---
          card_id = next((i['card_id'] for i in items
                          if i.get('title') == 'Client_Email'), items[0]['card_id'])

          # --- find a PDF key ---
          pdf_key = next((i.get('s3_pdf_path') for i in items if i.get('s3_pdf_path')), None)
          if not pdf_key:
              raise SystemExit("‚ùå No PDF found for this project ‚Äì generate Acta first!")

          payload = {
              "project_id": pid,
              "card_id":    card_id,
              "recipient":  email,
              "pdf_key":    pdf_key
          }

          print("üì®  Invoking sendApprovalEmail ‚Ä¶")
          boto3.client('lambda', region_name=region).invoke(
              FunctionName='sendApprovalEmail',
              InvocationType='Event',
              Payload=json.dumps(payload).encode()
          )
          print("‚úÖ  Invocation queued successfully")
          PY
