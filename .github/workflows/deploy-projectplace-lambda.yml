name: Build & Deploy Lambda Container (Latest)

on:
  push:
    branches: [main]
    paths:
      - 'Dockerfile'
      - 'requirements.txt'
      - 'lambda_handler.py'
      - 'logo/**'
      - '.github/workflows/deploy-lambda.yml'
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: 703671891952.dkr.ecr.us-east-2.amazonaws.com/projectplace-lambda
  LAMBDA_FUNCTION_NAME: ProjectPlaceDataExtractor

jobs:
  build_deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build & push Docker image (always latest, always no-cache)
      run: |
        docker build --no-cache -t $ECR_REPOSITORY:latest .
        docker push $ECR_REPOSITORY:latest

    - name: Update Lambda to latest image
      run: |
        aws lambda update-function-code \
          --function-name "${{ env.LAMBDA_FUNCTION_NAME }}" \
          --image-uri "${{ env.ECR_REPOSITORY }}:latest" \
          --region "${{ env.AWS_REGION }}"

    - name: Invoke Lambda (async, fire-and-forget)
      run: |
        aws lambda invoke \
          --function-name "${{ env.LAMBDA_FUNCTION_NAME }}" \
          --invocation-type Event \
          --payload '{}' output.json \
          --region "${{ env.AWS_REGION }}"
        echo "Lambda triggered (async)"

  poll_and_convert:
    runs-on: ubuntu-latest
    needs: build_deploy

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Install requirements for polling/conversion
        run: |
          sudo apt-get update
          sudo apt-get install -y libreoffice python3-pandas python3-openpyxl

      - name: Download latest Excel for count
        run: |
          mkdir -p actas
          aws s3 cp s3://${{ env.S3_BUCKET }}/actas/Acta_de_Seguimiento.xlsx actas/Acta_de_Seguimiento.xlsx

      - name: Count expected Acta (unique project_id in Excel)
        id: count_acta
        run: |
          ACTA_COUNT=$(python3 -c "import pandas as pd; df = pd.read_excel('actas/Acta_de_Seguimiento.xlsx'); print(df['project_id'].nunique())")
          echo "ACTA_COUNT=$ACTA_COUNT" >> $GITHUB_ENV
          echo "Expected Acta count: $ACTA_COUNT"

      - name: Poll S3 for available Acta DOCX (max 7 min)
        run: |
          mkdir -p actas
            for i in {1..21}; do
              aws s3 sync s3://${{ env.S3_BUCKET }}/actas actas --exclude "*" --include "Acta_*.docx" --delete
              COUNT=$(ls -1 actas/Acta_*.docx 2>/dev/null | wc -l || true)
              if [ "$COUNT" -eq "${{ env.ACTA_COUNT }}" ]; then
                echo "‚úÖ $COUNT Acta DOCX files found (all expected)."
                break
              fi
              echo "üîÑ Only $COUNT/${{ env.ACTA_COUNT }} found. Sleeping 20s..."
              sleep 20
              [ "$i" -eq 21 ] && { echo "‚ùå Timeout (7 min): Not all Acta present"; exit 1; }
            done

      - name: List found Acta DOCX
        run: |
          ls -l actas/Acta_*.docx || echo "No Acta files found"

      - name: Convert each DOCX ‚áí PDF
        run: |
          cd actas
          for f in Acta_*.docx; do
            libreoffice --headless --convert-to pdf "$f"
          done
          echo "‚úÖ Conversion finished."

      - name: Upload PDFs back to S3
        run: |
          aws s3 sync actas s3://${{ env.S3_BUCKET }}/actas \
            --exclude "*" --include "Acta_*.pdf" \
            --content-type "application/pdf" \
            --content-disposition "attachment"
          echo "‚úÖ PDF upload complete."
