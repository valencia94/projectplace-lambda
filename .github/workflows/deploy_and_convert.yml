name: Deploy and Convert (prod)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ global constants ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
env:
  AWS_REGION:     us-east-2
  ACCOUNT_ID:     "703671891952"
  ECR_REGISTRY:   "${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
  ECR_REPOSITORY: projectplace-lambda
  IMAGE_TAG:      "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Job 1 ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
jobs:
  deploy-lambda:
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout
      uses: actions/checkout@v3

    - name: üîê Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ env.AWS_REGION }}

    - name: üê≥ Login to Amazon ECR (registry host only)
      run: |
        aws ecr get-login-password --region "$AWS_REGION" \
        | docker login --username AWS --password-stdin "$ECR_REGISTRY"

    - name: üõ† Build (no-cache) and push image
      run: |
        set -euo pipefail

        docker buildx build \
          --no-cache --pull \
          --platform linux/amd64 \
          -t "$IMAGE_TAG" \
          --push .

    - name: üöÄ Update Lambda to latest image
      run: |
        aws lambda update-function-code \
          --function-name ProjectPlaceDataExtractor \
          --image-uri "$IMAGE_TAG" \
          --region "$AWS_REGION"

    - name: ‚è≥ Wait for code update
      run: |
        aws lambda wait function-updated \
          --function-name ProjectPlaceDataExtractor \
          --region "$AWS_REGION"

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ merge / upsert env-vars ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: üì¶ Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: üß¨ Merge & apply env-vars
      run: |
        set -euo pipefail
        OLD=$(aws lambda get-function-configuration \
               --function-name ProjectPlaceDataExtractor \
               --query 'Environment.Variables' --output json)

        NEW=$(echo "$OLD" | jq \
          --arg secret ProjectPlaceAPICredentials \
          --arg ddb   ProjectPlace_DataExtrator_landing_table_v3 \
          --arg s3    projectplace-dv-2025-x9a7b \
          '. + {
             SECRET_NAME:        $secret,
             DYNAMODB_TABLE_NAME:$ddb,
             S3_BUCKET_NAME:     $s3
           }')

        echo '{"Variables":'"$NEW"'}' > env.json

        aws lambda update-function-configuration \
          --function-name ProjectPlaceDataExtractor \
          --environment file://env.json \
          --region "$AWS_REGION"

    - name: ‚è≥ Wait for env update
      run: |
        aws lambda wait function-updated \
          --function-name ProjectPlaceDataExtractor \
          --region "$AWS_REGION"

    - name: üîé Invoke Lambda asynchronously
      run: |
        aws lambda invoke \
          --function-name ProjectPlaceDataExtractor \
          --invocation-type Event \
          --payload '{}' \
          --cli-binary-format raw-in-base64-out \
          --region "$AWS_REGION" /tmp/out.json
        echo "Lambda triggered  ‚Üí  $(cat /tmp/out.json)"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Job 2 ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  convert-docx:
    runs-on: ubuntu-latest
    needs: [ deploy-lambda ]

    steps:
    - name: üì• Checkout
      uses: actions/checkout@v3

    - name: üîê Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ env.AWS_REGION }}

    - name: üèó Install LibreOffice
      run: |
        sudo apt-get update
        sudo apt-get install -y libreoffice

    - name: üì• Wait for Acta DOCX files
      run: |
        mkdir -p actas
        for i in {1..15}; do
          echo "‚è≥  Attempt $i / 15 ‚Äî checking S3 for Acta_*.docx"
          aws s3 sync \
            s3://projectplace-dv-2025-x9a7b/actas actas \
            --exclude "*" --include "Acta_*.docx" --delete

          cnt=$(ls -1 actas/Acta_*.docx 2>/dev/null | wc -l || true)
          if [ "$cnt" -gt 0 ]; then
            echo "‚úÖ  Found $cnt DOCX file(s)."
            break
          fi
          sleep 20
          [ "$i" -eq 15 ] && { echo "‚ùå  Timeout (5 min)"; exit 1; }
        done

    - name: üñ® Convert DOCX ‚Üí PDF
      run: |
        cd actas
        for f in Acta_*.docx; do
          libreoffice --headless --convert-to pdf "$f"
        done
        echo "‚úÖ  Conversion complete."

    - name: üöÄ Upload PDFs to S3
      run: |
        aws s3 sync actas s3://projectplace-dv-2025-x9a7b/actas \
          --exclude "*" --include "Acta_*.pdf" \
          --content-type "application/pdf" \
          --content-disposition "attachment"
        echo "‚úÖ  PDF upload complete."
