name: Deploy and Convert (stag)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

env:                      # <── shared globals
  AWS_REGION:    us-east-2
  ECR_REGISTRY:  703671891952.dkr.ecr.us-east-2.amazonaws.com
  ECR_REPOSITORY: projectplace-lambda
  STAGE_TAG:     stag
  IMAGE_TAG:     ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.STAGE_TAG }}

jobs:
  deploy-lambda:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout source
        uses: actions/checkout@v3

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: 🐳 Login to Amazon ECR
        run: |
          aws ecr get-login-password --region "$AWS_REGION" |
          docker login --username AWS --password-stdin "$ECR_REGISTRY"

      - name: 🛠 Build (no-cache) and push Docker image
        run: |
          set -euo pipefail
          docker buildx build \
            --no-cache --pull \
            --platform linux/amd64 \
            --build-arg USE_TAG_HANDLER=true \
            -t projectplace-lambda:latest \
            -t "$IMAGE_TAG" \
            --push .             # ← pushes in one shot

      - name: 🚀 Update Lambda to latest image
        run: |
          set -euo pipefail
          aws lambda update-function-code \
            --function-name ProjectPlaceDataExtractor-stag \
            --image-uri "$IMAGE_TAG" \
            --region "$AWS_REGION"

      - name: ⏳ Wait for code update to finish
        run: |
          aws lambda wait function-updated \
            --function-name ProjectPlaceDataExtractor-stag \
            --region "$AWS_REGION"

      # ─────────────── Environment variables merge ───────────────
      - name: 📦 Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: 🧬 Merge & apply env-vars
        run: |
          set -euo pipefail
          OLD=$(aws lambda get-function-configuration \
                 --function-name ProjectPlaceDataExtractor-stag \
                 --query 'Environment.Variables' --output json)

          NEW=$(echo "$OLD" | jq \
            --arg secret ProjectPlaceAPICredentials \
            --arg ddb   ProjectPlace_DataExtrator_landing_table_v3 \
            --arg s3    projectplace-dv-2025-x9a7b \
            '. + {
               SECRET_NAME:        $secret,
               DYNAMODB_TABLE_NAME:$ddb,
               S3_BUCKET_NAME:     $s3
             }')

          echo '{"Variables":'"$NEW"'}' > env.json

          aws lambda update-function-configuration \
            --function-name ProjectPlaceDataExtractor-stag \
            --environment file://env.json \
            --region "$AWS_REGION"

      - name: ⏳ Wait for env update
        run: |
          aws lambda wait function-updated \
            --function-name ProjectPlaceDataExtractor-stag \
            --region "$AWS_REGION"

      # ─────────────── Smoke test ───────────────
      - name: 🔎 One-shot Lambda invoke (async)
        run: |
          aws lambda invoke \
            --function-name ProjectPlaceDataExtractor-stag \
            --invocation-type Event \
            --payload '{}' \
            --region "$AWS_REGION" \
            /tmp/out.json
          echo "Lambda triggered → $(cat /tmp/out.json)"

  # ───────────────────────── Convert job ─────────────────────────
  convert-docx:
    runs-on: ubuntu-latest
    needs: [ deploy-lambda ]

    steps:
      - name: 📥 Checkout source
        uses: actions/checkout@v3

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: 🏗 Install LibreOffice
        run: |
          sudo apt-get update
          sudo apt-get install -y libreoffice

      - name: 📥 Wait and download Acta_*.docx from S3
        run: |
          mkdir -p actas

          for i in {1..15}; do
            echo "⏳ Attempt $i: checking for 'Acta_*.docx' in S3..."
            aws s3 sync \
              s3://projectplace-dv-2025-x9a7b/actas actas \
              --exclude "*" --include "Acta_*.docx" \
              --delete

            COUNT=$(ls -1 actas/Acta_*.docx 2>/dev/null | wc -l)
            if [ "$COUNT" -gt 0 ]; then
              echo "✅ Found $COUNT .docx file(s). Proceeding to conversion."
              break
            fi

            echo "🔄 No Acta_*.docx found yet. Retrying in 20 seconds..."
            sleep 20

            if [ "$i" -eq 15 ]; then
              echo "❌ Timeout after 5 minutes. No .docx files found."
              exit 1
            fi
          done

      - name: 🖨 Convert each .docx => .pdf
        run: |
          cd actas
          echo "Converting .docx to .pdf..."
          for f in Acta_*.docx; do
            libreoffice --headless --convert-to pdf "$f"
          done
          echo "✅ Conversion done."

      - name: 🚀 Upload .pdf files back to S3
        run: |
          aws s3 sync actas s3://projectplace-dv-2025-x9a7b/actas \
            --exclude "*" --include "Acta_*.pdf" \
            --content-type "application/pdf" \
            --content-disposition "attachment"
          echo "✅ PDF upload complete."
