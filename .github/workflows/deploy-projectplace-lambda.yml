name: Build & Deploy – ProjectPlaceDataExtractor

on:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'requirements.txt'
      - 'lambda_handler.py'
      - '.github/workflows/deploy-projectplace-lambda.yml'
  workflow_dispatch:

env:
  # ─── real ECR repo name ───
  ECR_REPOSITORY: projectplace-lambda          # << fixed
  IMAGE_TAG:     latest
  LAMBDA_FUNCTION_NAME: ProjectPlaceDataExtractor

jobs:
  build_deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build & push container image
      env:
        REGISTRY:   ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ env.ECR_REPOSITORY }}
        TAG:        ${{ env.IMAGE_TAG }}
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$TAG .
        docker push   $REGISTRY/$REPOSITORY:$TAG

    - name: Update Lambda function to new image
      env:
        REGISTRY:   ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ env.ECR_REPOSITORY }}
        TAG:        ${{ env.IMAGE_TAG }}
      run: |
        aws lambda update-function-code \
              --function-name "${{ env.LAMBDA_FUNCTION_NAME }}" \
              --image-uri "$REGISTRY/$REPOSITORY:$TAG"

    - name: Smoke-test invocation
      run: |
        aws lambda invoke --function-name "${{ env.LAMBDA_FUNCTION_NAME }}" \
                          --cli-binary-format raw-in-base64-out \
                          --payload '{}' response.json
        cat response.json
